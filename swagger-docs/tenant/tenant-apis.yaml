openapi: 3.0.0
info:
  title: "Tenant Portal APIs"
  description: Tenant API POC
  version: 1.0.1
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
x-amazon-apigateway-request-validator: all
paths:
  /v1/upload-employee-data:
    post:
      summary: Upload Tenant Users CSV file to S3 Bucket
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadCSVFileLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/get-employee-groups-data:
    get:
      summary: The filtered Employee Groups are called here # need to modify
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetEmployeeGroupsLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/rm/manage-rewards-rules:
    get:
      summary: manages employee rewards rules
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageRewardRulesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    post:
      summary: manages employee rewards rules
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageRewardRulesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    patch:
      summary: Patches employee rewards rules
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageRewardRulesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    delete:
      summary: Deletes on employee rewards rules
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageRewardRulesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/manage-rewards-transfer-logs:
    get:
      summary: manages employee rewards transfer logs
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RewardTransferLogsLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/manage-employee-data:
    get:
      summary: To get the information of the Employees
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantEmployeesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    post:
      summary: To perform creation of the employees data
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantEmployeesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    patch:
      summary: Performs updates on employee data
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantEmployeesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/manage-employee-groups:
    get:
      summary: To get the information of the Employee Groups
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageEmployeeGroupsLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/manage-employee-profile:
    get:
      summary: To get the information of the Employee Profile
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageEmployeeProfileLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []
    post:
      summary: To post the information of the Employee Profile
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageEmployeeProfileLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []
    delete:
      summary: To delete the information of the Employee Profile
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageEmployeeProfileLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/manage-cards-template:
    post:
      summary: To put an object in s3 and update cardsMetadata ddb table # need to modify
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageCardTemplateLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []
    get:
      summary: To get the metadata generated in the cardsMetadata ddb table # need to modify
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageCardTemplateLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []
    patch:
      summary: To update the metadata in the cardsMetadata ddb table # need to modify
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageCardTemplateLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/manage-tenant-teams:
    get:
      summary: To get the information of the tenant teams
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantTeamsLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    post:
      summary: To get the information of the tenant teams
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantTeamsLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    patch:
      summary: To get the information of the tenant teams
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantTeamsLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    delete:
      summary: To get the information of the tenant teams
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantTeamsLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/manage-tenant-engagements:
    post:
      summary: To post skills, values and appreciations
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantEngagementLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []
    get:
      summary: To get skills, values and appreciations
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantEngagementLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []
    delete:
      summary: To delete skills or values
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantEngagementLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/manage-tenant-certificates:
    get:
      summary: To get the information of the tenant certificates
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantCertificatesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    post:
      summary: To perform create ops on tenant certificates
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantCertificatesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    patch:
      summary: To perform update ops on tenant certificates
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantCertificatesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

    delete:
      summary: To perform delete ops on  tenant certificates
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageTenantCertificatesLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/manage-surveys:
    get:
      summary: To get the information of the Survey questions and responses
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageSurveysLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []
    post:
      summary: To submit the survey responses
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageSurveysLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/handle-create-cards:
    get:
      summary: Get all the details of cardorder
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandleCreateCardsLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []
    post:
      summary: send the requets of creating cards to step function.
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandleCreateCardsLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

  /v1/get-locations:
    get:
      summary: Get all Tenant Profiles
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetGISDataLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []
  /v1/post-locations:
    post:
      summary: Get all Tenant Profiles
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        passthroughBehavior: WHEN_NO_MATCH
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostGISDataLambda.Arn}/invocations
        responses:
          default:
            statusCode: "200"
      security:
        - UserPool: []

components:
  schemas:
    Tenantrequestbody:
      description: Tenant request body of POST API
      type: object
      properties:
        TenantInput1:
          type: string
          description: Tenant description of input1
        TenantInput2:
          type: string
          description: Tenant description of input2
    Tenantresponse:
      description: Tenant response of the API
      type: object
      properties:
        TenantRequiredField:
          type: string
          description: Tenant description of TenantRequiredField
        field2:
          type: string
        field3:
          type: object
    errorbody:
      type: object
      properties:
        errorText:
          type: string

securityDefinitions:
  UserPool:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "cognito_user_pools"
    x-amazon-apigateway-authorizer:
      type: "cognito_user_pools"
      providerARNs:
        - Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${TenantCognitoUserPool}
