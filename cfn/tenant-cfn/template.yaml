AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Tenant Portal related APIs.

Parameters:
  DataStack:
    Type: String
    Description: Data Stack
  Environment:
    Type: String
    Description: The runtime environment of this stack
  MapBurstLimit:
    Type: Number
    Default: 100
  MapRateLimit:
    Type: Number
    Default: 100
  MapThrottlingLimit:
    Type: Number
    Default: 100
  MapThrottlingBurstLimit:
    Type: Number
    Default: 100

Conditions:
  # If the build is not on Deployment branch this condition is true.
  IsTestBuild: !Not
    - !Or
      - !Equals [!Ref Environment, "dev"]
      - !Equals [!Ref Environment, "uat"]
      - !Equals [!Ref Environment, "prod"]

Mappings:
  AccountMappings:
    "231252353945": # dev
      APSouthDomainName: dev.company.testrewardsapp.com # need to change the url
      APSouthHostedZoneId: Z074248724SPYLLD7799K
      TenantClientTokenValidityHRS: 10
      TenantClientAuthSessionValidityMin: 5

Resources:
  #  ---------- 1. General SSM Parameters ------------------------------------------------------
  #  ------------------------------------------------------------------------------------------
  #  ------------------------------------------------------------------------------------------

  TenantProfilesTablePrefix:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/prefixes/ddb/tenant-profiles-table
      Type: String
      Value: TenantProfilesTable

  CardsMetaDataTablePrefix:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/prefixes/ddb/cards-meta-data-table
      Type: String
      Value: CardsMetaDataTable

  CardsCreationTrackerTablePrefix:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/prefixes/ddb/cards-tracker-table
      Type: String
      Value: CardsCreationTrackerTable

  EmployeeDataTablePrefix:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/prefixes/ddb/employee-data-table
      Type: String
      Value: EmployeeDataTable

  EmployeeGroupsTablePrefix:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/prefixes/ddb/employee-groups-table
      Type: String
      Value: EmployeeGroupsTable

  # -- EventBridge Name ---
  EventBridgeName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/event-bridge-name
      Type: String
      Value: default

  # -- Employee data table event source and detail type parameters ---
  EventSourceEmployeeDataTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/event-source/ddb/source/employee-data
      Type: String
      Value: employee-data-table-events

  EventDetailTypeEmployeeDataTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/event-source/ddb/detail-type/employee-data
      Type: String
      Value: new-image-events

  # -- Tenant Engagement table event source and detail type parameters ---
  EventSourceTenantEngagementTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/event-source/ddb/source/tenant-engagements
      Type: String
      Value: tenant-engagements-table-events

  EventDetailTypeTenantEngagementTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/event-source/ddb/detail-type/tenant-engagements
      Type: String
      Value: new-engagements-image-events

  GISTablePrefix:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/prefixes/ddb/GIS-Table-table
      Type: String
      Value: GISTable

  # Public Key is created manually and the value is referred to it accordingly.
  CloudFrontPublicKeyId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/cloudfront/public-key-id
      Type: String
      Value: KJSZ8RHPSJO2B

  # ---------- 2. EVB Rules ----------------------------------------------------------------
  # ------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------

  InvokeCreateUserDataLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Triggers to Create Tenant UserPool and update respective tenant tables"
      EventBusName: default
      EventPattern:
        source:
          - !GetAtt EventSourceEmployeeDataTable.Value
        detail-type:
          - !GetAtt EventDetailTypeEmployeeDataTable.Value
      Targets:
        - Arn: !GetAtt CreateUserPoolInfoLambda.Arn
          Id: "TargetFunction-For-userPool"
        - Arn: !GetAtt UpdateEmployeeGroupsLambda.Arn
          Id: "TargetFunction-For-UpdateEmployeeGroupsLambda"
        - Arn: !GetAtt UpdateTenantTeamsTableLambda.Arn
          Id: "TargetFunction-For-UpdateTenantTeamsTableLambda"

  InvokeTenantEngagementLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Triggers for outbound integrations"
      EventBusName: default
      EventPattern:
        source:
          - !GetAtt EventSourceTenantEngagementTable.Value
        detail-type:
          - !GetAtt EventDetailTypeTenantEngagementTable.Value
      Targets:
        - Arn: !Ref TenantOutboundIntegrationsSNS
          Id: "TargetFunction-For-TenantOutboundIntegrationsSNS"

  InvokeStartRewardRuleTransactionLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Triggers Start Reward Rule Transaction Lambda"
      ScheduleExpression: "cron(50 17 * * ? *)"
      EventBusName: default
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt StartRewardsRuleTransactionLambda.Arn
          Id: "TargetFunction-Regular-Invocation-of-start-reward-rule-lambda"

  # ---------- 3. API gateway ----------------------------------------------------------------
  # ------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------
  TenantAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      OpenApiVersion: "3.0"
      Domain:
        CertificateArn: !Ref TenantDomainACM
        DomainName: !If
          - IsTestBuild
          - !Sub
            - ${Environment}.${DomainName}
            - DomainName:
                !FindInMap [
                  AccountMappings,
                  !Ref "AWS::AccountId",
                  APSouthDomainName,
                ]
          - !FindInMap [
              AccountMappings,
              !Ref "AWS::AccountId",
              APSouthDomainName,
            ]
        Route53:
          HostedZoneId:
            !FindInMap [
              AccountMappings,
              !Ref "AWS::AccountId",
              APSouthHostedZoneId,
            ]
        EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'POST, GET, PATCH, PUT, DELETE'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "../../swagger-docs/tenant/tenant-apis.yaml"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          DataTraceEnabled: true
          LoggingLevel: INFO
          MetricsEnabled: true
          ThrottlingRateLimit: !Ref MapThrottlingLimit
          ThrottlingBurstLimit: !Ref MapThrottlingBurstLimit
      TracingEnabled: true

  TenantAPIGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    # Adding TenantAPIGatewayStage in order to create UsagePlan after stage is created
    # referring to TenantAPIGatewayStage (<api-name>Stage) which is the default name creation for stage in AWS
    DependsOn:
      - TenantAPIGatewayStage
    Properties:
      ApiStages:
        - ApiId: !Ref TenantAPIGateway
          Stage: !Ref Environment
      Description: Usage plan for this API
      # Update throttle settings based on env
      Throttle:
        RateLimit: !Ref MapBurstLimit
        BurstLimit: !Ref MapRateLimit

  TenantAPIGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - TenantAPIGatewayStage
    Properties:
      KeyId: !Ref TenantAPIGatewayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref TenantAPIGatewayUsagePlan

  TenantAPIGatewayApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - TenantAPIGatewayUsagePlan
      - TenantAPIGatewayStage
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Ref TenantAPIGateway
          StageName: !Ref Environment
      Value:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref GenerateSecretKey,
            ":SecretString:apikey}}",
          ],
        ]

  GenerateSecretKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub SecretKeyTenantAPI/${Environment}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "getapikey"}'
        ExcludePunctuation: true
        GenerateStringKey: "apikey"
        PasswordLength: 21

  TenantDomainACM:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsTestBuild
        - !Sub
          - ${Environment}.${DomainName}
          - DomainName:
              !FindInMap [
                AccountMappings,
                !Ref "AWS::AccountId",
                APSouthDomainName,
              ]
        - !FindInMap [AccountMappings, !Ref "AWS::AccountId", APSouthDomainName]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !If
            - IsTestBuild
            - !Sub
              - ${Environment}.${DomainName}
              - DomainName:
                  !FindInMap [
                    AccountMappings,
                    !Ref "AWS::AccountId",
                    APSouthDomainName,
                  ]
            - !FindInMap [
                AccountMappings,
                !Ref "AWS::AccountId",
                APSouthDomainName,
              ]
          HostedZoneId:
            !FindInMap [
              AccountMappings,
              !Ref "AWS::AccountId",
              APSouthHostedZoneId,
            ]

  # -----------4. All DDB Tables in Tenant Portal--------------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------------------------------------------------------------

  # ----------A)Tenant Users Portal Related DDB Tables -----
  # ------------------------------------------------------------------------------------------------------------------------------------------------

  # --Employee Data DDB Tables and related Indexes---

  DDBEmployeeDataTableEmailIdIndex:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/dynamodb/EmployeeDataTable-EmailIdIndex
      Type: String
      Value: EmailId_Index
  DDBEmployeeDataTableExternalIdIndex:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/dynamodb/EmployeeDataTable-ExternalIdIndex
      Type: String
      Value: ExternalId_Index
  DDBEmployeeDataTableCognitoIdIndex:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/dynamodb/EmployeeDataTable-CognitoIdIndex
      Type: String
      Value: CognitoId_Index

  EmployeeDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub EmployeeDataTable-${Environment}
      AttributeDefinitions:
        - AttributeName: "UserName"
          AttributeType: "S"
        - AttributeName: "EmailId"
          AttributeType: "S"
        - AttributeName: "ExternalId"
          AttributeType: "S"
        - AttributeName: "CognitoId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "UserName"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      GlobalSecondaryIndexes:
        - IndexName: !GetAtt DDBEmployeeDataTableEmailIdIndex.Value
          KeySchema:
            - AttributeName: "EmailId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        - IndexName: !GetAtt DDBEmployeeDataTableExternalIdIndex.Value
          KeySchema:
            - AttributeName: "ExternalId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        - IndexName: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value
          KeySchema:
            - AttributeName: "CognitoId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"

  # --Employee Groups DDB Table---
  EmployeeGroupsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub EmployeeGroupsTable-${Environment}
      AttributeDefinitions:
        - AttributeName: "GroupId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "GroupId"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"

  # ----
  # Tenant Skills table
  TenantSkillsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub TenantSkillsTable-${Environment}
      AttributeDefinitions:
        - AttributeName: SkillId
          AttributeType: S
      KeySchema:
        - AttributeName: SkillId
          KeyType: HASH
      BillingMode: "PAY_PER_REQUEST"

  # - Tenant Values table -
  TenantValuesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub TenantValuesTable-${Environment}
      AttributeDefinitions:
        - AttributeName: ValueId
          AttributeType: S
      KeySchema:
        - AttributeName: ValueId
          KeyType: HASH
      BillingMode: "PAY_PER_REQUEST"

  # Tenant Milestones table
  TenantMilestonesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub TenantMilestonesTable-${Environment}
      AttributeDefinitions:
        - AttributeName: MilestoneId
          AttributeType: S
      KeySchema:
        - AttributeName: MilestoneId
          KeyType: HASH
      BillingMode: "PAY_PER_REQUEST"

  # Tenant Metrics table
  TenantMetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub TenantMetricsTable-${Environment}
      AttributeDefinitions:
        - AttributeName: MetricsId # Unique Metric ID
          AttributeType: S
      KeySchema:
        - AttributeName: MetricsId
          KeyType: HASH
      BillingMode: "PAY_PER_REQUEST"

  # Tenant Engagement table and related Indexes
  DDBTenantEngagementTableProvidedByIndex:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/dynamodb/EngagementId-ProvidedByIndex
      Type: String
      Value: EngagementId_ProvidedBy_Index
  DDBTenantEngagementTableEngagementIdIndex:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/dynamodb/EntityId-EngagementIdIndex
      Type: String
      Value: EntityId_EngagementId_Index

  DDBTenantEngagementTableTimeStampIndex:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/dynamodb/EntityId-TimestampIndex
      Type: String
      Value: EntityId_Timestamp_Index

  TenantEngagementTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub TenantEngagementTable-${Environment}
      AttributeDefinitions:
        - AttributeName: EngagementId
          AttributeType: S
        - AttributeName: EntityId
          AttributeType: S
        - AttributeName: ProvidedBy
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: EngagementId
          KeyType: HASH
        - AttributeName: EntityId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: !GetAtt DDBTenantEngagementTableProvidedByIndex.Value
          KeySchema:
            - AttributeName: "EngagementId"
              KeyType: "HASH"
            - AttributeName: "ProvidedBy"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: !GetAtt DDBTenantEngagementTableEngagementIdIndex.Value
          KeySchema:
            - AttributeName: "EntityId"
              KeyType: "HASH"
            - AttributeName: "EngagementId"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: !GetAtt DDBTenantEngagementTableTimeStampIndex.Value
          KeySchema:
            - AttributeName: "EntityId"
              KeyType: "HASH"
            - AttributeName: "Timestamp"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      BillingMode: "PAY_PER_REQUEST"
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  # - Tenant-Integration-Table -
  TenantIntegrationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub TenantIntegrationTable-${Environment}
      AttributeDefinitions:
        - AttributeName: TeamId
          AttributeType: S
      KeySchema:
        - AttributeName: TeamId
          KeyType: HASH
      BillingMode: "PAY_PER_REQUEST"

  # -- Tenant Teams table -
  TenantTeamsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub TenantTeamsTable-${Environment}
      AttributeDefinitions:
        - AttributeName: EntityId
          AttributeType: S
        - AttributeName: RelatedEntityId
          AttributeType: S
      KeySchema:
        - AttributeName: EntityId
          KeyType: HASH
        - AttributeName: RelatedEntityId
          KeyType: RANGE
      BillingMode: "PAY_PER_REQUEST"
      GlobalSecondaryIndexes:
        - IndexName: RelatedEntityId-EntityId_Index
          KeySchema:
            - AttributeName: "RelatedEntityId"
              KeyType: "HASH"
            - AttributeName: "EntityId"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  # ----------B)Tenant Admin Portal Related DDB Tables ---------------------------------------
  # ------------------------------------------------------------------------------------------------------------------------------------------------

  # --  Certificates related DDB Table---
  TenantCertificatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub TenantCertificatesTable-${Environment}
      AttributeDefinitions:
        - AttributeName: CertificateId
          AttributeType: S
      KeySchema:
        - AttributeName: CertificateId
          KeyType: HASH
      BillingMode: "PAY_PER_REQUEST"

  # --  Certificates Transfer Logs related DDB Table---
  CertificateTransferLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Certificates-TransferLogs-${Environment}
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "CertificateTransferId"
          AttributeType: "S"
        - AttributeName: "SourceUserName"
          AttributeType: "S"
        - AttributeName: "CertificateTransferLogTime"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "CertificateTransferId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: CertificateTransferLogsId_Source
          KeySchema:
            - AttributeName: "SourceUserName"
              KeyType: "HASH"
            - AttributeName: "CertificateTransferLogTime"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  # --  Rewards Rules DDB Table and Index--
  DDBRewardRulesTableRuleStatusIndex:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/dynamodb/RewardRulesTable-RuleStatusIndex
      Type: String
      Value: RuleStatus_Index
  DDBRewardRulesTableRewardRuleLogUpdateDateIndex:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/dynamodb/RewardRulesTable-RewardRuleLogUpdateDateIndex
      Type: String
      Value: RewardRuleLogUpdateDate_Index
  DDBRewardRulesTableRuleLogUpdateDateIndex:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/dynamodb/RewardRulesTable-RuleLogUpdateDateIndex
      Type: String
      Value: RuleLogUpdateDate_Index

  RewardRulesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Reward-Rules-${Environment}
      AttributeDefinitions:
        - AttributeName: "RuleId"
          AttributeType: "S"
        - AttributeName: "RuleType"
          AttributeType: "S"
        - AttributeName: "RuleStatus"
          AttributeType: "S"
        - AttributeName: "RewardRuleLogUpdateDate"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "RuleId"
          KeyType: "HASH"
        - AttributeName: "RuleType"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      GlobalSecondaryIndexes:
        - IndexName: !GetAtt DDBRewardRulesTableRuleStatusIndex.Value
          KeySchema:
            - AttributeName: "RuleStatus"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        - IndexName: !GetAtt DDBRewardRulesTableRewardRuleLogUpdateDateIndex.Value
          KeySchema:
            - AttributeName: "RewardRuleLogUpdateDate"
              KeyType: "HASH"
            - AttributeName: "RuleType"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: !GetAtt DDBRewardRulesTableRuleLogUpdateDateIndex.Value
          KeySchema:
            - AttributeName: "RuleType"
              KeyType: "HASH"
            - AttributeName: "RewardRuleLogUpdateDate"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  # --  Rewards Transfer logs table--
  RewardsTransferLogsTableV2:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Reward-TransferLogs-v2-${Environment}
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"

  # --- Rewards Default Data ---
  DefaultRewardTypeStatusData:
    Type: Custom::LoadDefaultData
    Properties:
      ServiceToken: !GetAtt ManageDDBTableDefaultData.Arn
      DDBTableName: !Ref RewardRulesTable
      PrimaryKeys: >
        {
          "RuleId" : "0000AAAA",
          "RuleType": "RewardTypeStatus"
        }
      Data: >
        {
          "RuleId": "0000AAAA",
          "RuleType": "RewardTypeStatus",
          "RewardTypeStatus": {
            "RD01": {
                "RewardTypeId": "RD01",
                "RewardName": "Health Rewards",
                "RewardDesc": "Rewards are applicable for only health related resources in marketplace",
                "Active": true
            },
            "RD02": {
                "RewardTypeId": "RD02",
                "RewardName": "Skill Development Rewards",
                "RewardDesc": "Rewards are applicable for skill development resources in marketplace",
                "Active": false
            },
            "RD03": {
                "RewardTypeId": "RD03",
                "RewardName": "Employee Support Rewards",
                "RewardDesc": "Rewards are applicable for employee support resources in marketplace",
                "Active": false
            },
            "RD00": {
                "RewardTypeId": "RD00",
                "RewardName": "General Rewards",
                "RewardDesc": "Rewards are applicable all general types",
                "Active": true
            }
          }
        }

  DefaultRewardUnitsData:
    Type: Custom::LoadDefaultData
    Properties:
      ServiceToken: !GetAtt ManageDDBTableDefaultData.Arn
      DDBTableName: !Ref RewardRulesTable
      PrimaryKeys: >
        {
          "RuleId" : "0000BBBB",
          "RuleType": "RewardUnits"
        }
      Data: >
        {
          "RuleId":  "0000BBBB",
          "RuleType": "RewardUnits",
          "RewardUnits": {
            "Points" : "10",
            "EqualAmount": "1",
            "CurrencyType": "INR"
          }
        }

  ExampleRewardRuleData:
    Type: Custom::LoadDefaultData
    Properties:
      ServiceToken: !GetAtt ManageDDBTableDefaultData.Arn
      DDBTableName: !Ref RewardRulesTable
      PrimaryKeys: >
        {
          "RuleId" : "rr-0000cccc",
          "RuleType": "RewardRules"
        }
      Data: >
        {
          "RuleId":  "rr-0000cccc",
          "RuleType": "RewardRules",
          "RuleName": "HealthRewards-01",
          "RuleDesc": "Example Reward Rule - Yearly Health Rewards",
          "RuleForImplementation" : "Everyone",
          "RuleRewardPoints" : "10000",
          "RuleRewardType": "RD01",
          "RuleWhenImplementation": "Yearly",
          "RuleStartDate": "01-01-2024",
          "RuleEndDate": "01-01-2035",
          "RuleStatus": "Draft",
          "RuleLastUpdated" : "01-01-2024"
        }

  ExampleRewardUpdateLogData:
    Type: Custom::LoadDefaultData
    Properties:
      ServiceToken: !GetAtt ManageDDBTableDefaultData.Arn
      DDBTableName: !Ref RewardRulesTable
      PrimaryKeys: >
        {
          "RuleId" : "ru-0000dddd",
          "RuleType": "RewardUpdateLogs"
        }
      Data: >
        {
          "RuleId":  "ru-0000dddd",
          "RuleType": "RewardUpdateLogs",
          "RewardRuleLogData": "A Reward Rule : rr-0000cccc has been Created by Admin",
          "RewardRuleLogUpdateDate": "01-01-2024",
          "RewardRuleUpdateBy" : "Admin"
        }

  RewardsAdminDataUser:
    Type: Custom::LoadDefaultData
    Properties:
      ServiceToken: !GetAtt ManageDDBTableDefaultData.Arn
      DDBTableName: !Ref EmployeeDataTable
      PrimaryKeys: >
        {
          "UserName" : "RewardsAdminUser"
        }
      Data: >
        {
          "UserName" : "RewardsAdminUser",
          "RewardsData": {
            "RD00": {
                "RewardId": "RD00",
                "TransferablePoints": 100
              },
              "RD01": {
                "RewardId": "RD01",
                "TransferablePoints": 100
              },
              "RD02": {
                "RewardId": "RD02",
                "TransferablePoints": 100
              },
              "RD03": {
                "RewardId": "RD03",
                "TransferablePoints": 100
              }
          }
        }

  CardsMetaDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub CardsMetaDataTable-${Environment}
      AttributeDefinitions:
        - AttributeName: "CardId"
          AttributeType: "S"
        - AttributeName: "CardType"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "CardId"
          KeyType: "HASH"
        - AttributeName: "CardType"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      GlobalSecondaryIndexes:
        - IndexName: CardType_Index
          KeySchema:
            - AttributeName: "CardType"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        - IndexName: CardType-Status_Index
          KeySchema:
            - AttributeName: "CardType"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"

  RewardCardsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub RewardCardsTable-${Environment}
      AttributeDefinitions:
        - AttributeName: "CardNumber" # Unique Card Number
          AttributeType: "S"
        - AttributeName: "CardId" # Ref to the card MetaData Table
          AttributeType: "S"
        - AttributeName: "CardStatus" # Status of the card
          AttributeType: "S"
      KeySchema:
        - AttributeName: "CardNumber"
          KeyType: "HASH"
        - AttributeName: "CardId"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      GlobalSecondaryIndexes:
        - IndexName: CardId-Status_Index
          KeySchema:
            - AttributeName: "CardId"
              KeyType: "HASH"
            - AttributeName: "CardStatus"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  CardsCreationTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub CardsCreationTracker-${Environment}
      AttributeDefinitions:
        - AttributeName: "JobId" # Unique Card TrackingNumber
          AttributeType: "S"
        - AttributeName: "BatchId" # Ref to the card MetaData Table
          AttributeType: "S"
        - AttributeName: "CardId" # Start time of the Job
          AttributeType: "S"
        - AttributeName: "LastModifiedTimestamp" # Start time of the Job
          AttributeType: "S"
      KeySchema:
        - AttributeName: "JobId"
          KeyType: "HASH"
        - AttributeName: "BatchId"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      GlobalSecondaryIndexes:
        - IndexName: CardId-StartTimestamp_Index
          KeySchema:
            - AttributeName: "CardId"
              KeyType: "HASH"
            - AttributeName: "LastModifiedTimestamp"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"


  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # --------------- 5.Tenant user pool and client --------------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------------------------------------------------------------

  TenantCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub Tenant-UserPool-${Environment}
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True # change to true (not sure have to discuss)
      DeletionProtection: INACTIVE # Change to Active for PROD Deployments
      UsernameAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Schema:
        - Name: userName
          AttributeDataType: String
          Mutable: true
        - Name: E_ID
          AttributeDataType: String
          Mutable: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  TenantProfileCognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub TenantProfileClient-${Environment}
      UserPoolId: !Ref TenantCognitoUserPool
      AccessTokenValidity:
        !FindInMap [
          AccountMappings,
          !Ref "AWS::AccountId",
          TenantClientTokenValidityHRS,
        ]
      AuthSessionValidity:
        !FindInMap [
          AccountMappings,
          !Ref "AWS::AccountId",
          TenantClientAuthSessionValidityMin,
        ]
      GenerateSecret: false

  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # --------------- 6.Lambda Modules with business logic --------------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------------------------------------------------------------

  # --------------- Employee Onboarding and Updating Groups, Teams + Handling streaming data from DDB --------------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------------------------------------------------------------

  # -- S3 Bucket for dropping CSV to create users + IAM Role for S3 Bucket + Bucket Policy-

  CreateUsersIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Tenant-Create-Users-${Environment}
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
                - lambda.amazonaws.com
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: IAM Role for S3 Bucket
      Policies:
        - PolicyName: CreateUsersIAMRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::daas-tenant-employee-data-files-${Environment}/*

  TenantCreateUsersBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub daas-tenant-employee-data-files-${Environment}
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Days
            Status: Enabled
            ExpirationInDays: 30

  OnboardingBucketingPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub daas-tenant-employee-data-files-${Environment}
      PolicyDocument:
        Id: LambdaPermissions
        Statement:
          - Sid: AllowLambda
            Effect: Allow
            Principal:
              AWS: !GetAtt OnboardingLambdaRole.Arn
            Action: s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::daas-tenant-employee-data-files-${Environment}/*

  # -- Onboarding Lambda Related Resources ----------

  UploadCSVFileLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda to drop csv file from Front end to S3 bucket
      Role: !GetAtt OnboardingLambdaRole.Arn
      Handler: "employee-data-uploads.lambda_handler"
      Runtime: python3.9
      Timeout: 300
      CodeUri: ../../lambdas/tenant-lambdas/employees-module/employee-data-uploads/
      Environment:
        Variables:
          Environment: !Ref Environment
          EMPLOYEE_DATA_UPLOAD_BUCKET: !Ref TenantCreateUsersBucket

  OnboardingLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Onboarding Lambda to drop CSV files to S3
      Role: !GetAtt OnboardingLambdaRole.Arn
      Handler: "tenant-create-users.create_employees_in_table"
      Runtime: python3.9
      Timeout: 300
      CodeUri: ../../lambdas/tenant-lambdas/employees-module/tenant-create-users/
      Environment:
        Variables:
          Environment: !Ref Environment
          EMPLOYEE_DATA_TABLE: !Ref EmployeeDataTable
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref TenantCreateUsersBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: Suffix
                    Value: .csv

  OnboardingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Onboarding-lambda-role-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt EmployeeDataTable.Arn
              - Effect: Allow
                Action:
                  - s3:getObject
                  - s3:putObject
                Resource:
                  - !Sub arn:aws:s3:::daas-tenant-employee-data-files-${Environment}/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  OnboardingLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnboardingLambda.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::daas-tenant-employee-data-files-${Environment}
      SourceAccount: !Ref "AWS::AccountId"

  # -------  Create-UserPool-Info-Lambda  -------

  CreateUserPoolInfoLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/employees-module/create-userpool-info/
      Description: "EmployeeData's Lambda to create employee data in Cognito Userpool and Update ID's in EmployeeData DDB Table"
      Role: !GetAtt UserPoolInfoLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          EMPLOYEE_DDB_TABLE: !Ref EmployeeDataTable
          EMPLOYEE_USER_POOL_ID: !Ref TenantCognitoUserPool

  UserPoolInfoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub UserPoolInfo-Lambda-Role-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem # Adding the internItem action
                Resource: !GetAtt EmployeeDataTable.Arn
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminGetUser
                Resource: !GetAtt TenantCognitoUserPool.Arn
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminUpdateUserAttributes
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:${TenantCognitoUserPool}

  UserPoolInfoLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateUserPoolInfoLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${InvokeCreateUserDataLambdaRule}

  # ------- DDB-streams-Forwarder lambda for Employee Data table + appreciations table -------

  DDBTeamsStreamsForwarderLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Dynamo DB streams forwarder"
      Architectures:
        - x86_64
      Handler: bootstrap
      Runtime: provided.al2
      Role: !GetAtt DDBTeamsStreamsForwarderRole.Arn
      CodeUri: ../../lambdas/tenant-lambdas/ddb-stream-forwarder/
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          EVB_NAME: !GetAtt EventBridgeName.Value
          EVB_DETAIL_TYPE_EMPLOYEE: !GetAtt EventDetailTypeEmployeeDataTable.Value
          EVB_SOURCE_NAME_EMPLOYEE: !GetAtt EventSourceEmployeeDataTable.Value
          EVB_DETAIL_TYPE_APPRECIATION: !GetAtt EventDetailTypeTenantEngagementTable.Value
          EVB_SOURCE_NAME_APPRECIATION: !GetAtt EventSourceTenantEngagementTable.Value

  DDBTeamsStreamsForwarderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub DDBTeamsStreamsForwarderLambda-${Environment}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBStreamPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - events:PutEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"

  EventSourceDDBStreamForDDBTeamsStreamsForwarder:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      Enabled: True
      EventSourceArn: !GetAtt EmployeeDataTable.StreamArn
      FunctionName: !GetAtt DDBTeamsStreamsForwarderLambda.Arn
      StartingPosition: LATEST

  EventSourceDDBStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      Enabled: True
      EventSourceArn: !GetAtt TenantEngagementTable.StreamArn
      FunctionName: !GetAtt DDBTeamsStreamsForwarderLambda.Arn
      StartingPosition: LATEST

  DDBStreamsLambdaInvokePermissionsEmployeeDataTable:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DDBTeamsStreamsForwarderLambda
      Principal: dynamodb.amazonaws.com
      SourceArn: !GetAtt EmployeeDataTable.Arn

  DDBStreamsLambdaInvokePermissionsEngagementTable:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DDBTeamsStreamsForwarderLambda
      Principal: dynamodb.amazonaws.com
      SourceArn: !GetAtt TenantEngagementTable.Arn

  # -------------- Update Employee Groups Data from the Employee Table in DDB --------------

  UpdateEmployeeGroupsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/employees-module/update-employee-groups/
      Description: "Updates Employee Groups Information in Groups DDB Table"
      Role: !GetAtt UpdateEmployeeGroupsLambdaRole.Arn
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          EMPLOYEE_GROUPS_TABLE: !Ref EmployeeGroupsTable

  UpdateEmployeeGroupsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub UpdateEmployeeGroups-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/TenantLambda/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource: !GetAtt EmployeeGroupsTable.Arn
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: "*"

  UpdateEmployeeGroupsLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UpdateEmployeeGroupsLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${InvokeCreateUserDataLambdaRule}

  # ---------- Get Employee Groups Lambda ----------

  GetEmployeeGroupsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/employees-module/get-employee-groups/
      Description: "Gets Employee Data based on Filter information provided"
      Role: !GetAtt GetEmployeeGroupsLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          EMPLOYEE_TABLE: !If
            - IsTestBuild
            - !Sub
              - ${TableNamePrefix}-test-${DataStack}
              - { TableNamePrefix: !GetAtt EmployeeDataTablePrefix.Value }
            - !Sub
              - ${TableNamePrefix}-${Environment}-${DataStack}
              - { TableNamePrefix: !GetAtt EmployeeDataTablePrefix.Value }
          EMPLOYEE_TABLE_EXTERNALID_INDEX: !GetAtt DDBEmployeeDataTableExternalIdIndex.Value
          EMPLOYEE_TABLE_EMAILID_INDEX: !GetAtt DDBEmployeeDataTableEmailIdIndex.Value
          EMPLOYEE_GROUPS_TABLE: !If
            - IsTestBuild
            - !Sub
              - ${TableNamePrefix}-test-${DataStack}
              - { TableNamePrefix: !GetAtt EmployeeGroupsTablePrefix.Value }
            - !Sub
              - ${TableNamePrefix}-${Environment}-${DataStack}
              - { TableNamePrefix: !GetAtt EmployeeGroupsTablePrefix.Value }

  GetEmployeeGroupsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Get-Employee-Groups-Lambda-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/TenantLambda/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                  - dynamodb:Scan
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EmployeeGroupsTablePrefix.Value}-${Environment}-${DataStack}

  GetEmployeeGroupsLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetEmployeeGroupsLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  # ------- Manage Employee Groups Lambda -------

  ManageEmployeeGroupsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/employees-module/manage-employee-groups/
      Description: "Manages Employee Groups Information in Groups DDB Table"
      Role: !GetAtt ManageEmployeeGroupsLambdaRole.Arn
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          EMPLOYEE_GROUPS_TABLE: !Ref EmployeeGroupsTable
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          EMPLOYEE_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value
          # CDN related variables
          SECRETS_CND_PK_ARN: !Ref PrivateKeySecretsCloudfront
          PUBLIC_KEY_ID: !GetAtt CloudFrontPublicKeyId.Value
          CDN_DOMAIN: !GetAtt CDNforTenantsS3Store.DomainName

  ManageEmployeeGroupsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ManageEmployeeGroups-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/TenantLambda/"
      Policies:
        - PolicyName: LambdaExecutionEmployeeGroups
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt EmployeeGroupsTable.Arn
                  - !GetAtt EmployeeDataTable.Arn
                  - !Sub ${EmployeeDataTable.Arn}/index/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref PrivateKeySecretsCloudfront
              - Effect: Allow
                Action:
                  - cloudfront:* # Adding the internItem action
                Resource: !Sub
                  - arn:aws:cloudfront::${AccountId}:distribution/${CdnId}
                  - CdnId: !Ref CDNforTenantsS3Store
                    AccountId: !Ref AWS::AccountId

  ManageEmployeeGroupsLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ManageEmployeeGroupsLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  # ---------- Manage Employee Data Lambda ----------

  ManageTenantEmployeesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/employees-module/manage-employee-data/
      Description: "Manages Employee Data based on the request provided"
      Role: !GetAtt ManageTenantEmployeesLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          EMPLOYEE_TABLE_EXTERNALID_INDEX: !GetAtt DDBEmployeeDataTableExternalIdIndex.Value
          EMPLOYEE_TABLE_EMAILID_INDEX: !GetAtt DDBEmployeeDataTableEmailIdIndex.Value
          EMPLOYEE_GROUPS_TABLE: !Ref EmployeeGroupsTable
          EMPLOYEE_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value
          # CDN related variables
          SECRETS_CND_PK_ARN: !Ref PrivateKeySecretsCloudfront
          PUBLIC_KEY_ID: !GetAtt CloudFrontPublicKeyId.Value
          CDN_DOMAIN: !GetAtt CDNforTenantsS3Store.DomainName

  ManageTenantEmployeesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt EmployeeDataTable.Arn
                  - !Sub ${EmployeeDataTable.Arn}/index/*
                  - !GetAtt EmployeeGroupsTable.Arn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref PrivateKeySecretsCloudfront
              - Effect: Allow
                Action:
                  - cloudfront:* # Adding the internItem action
                Resource: !Sub
                  - arn:aws:cloudfront::${AccountId}:distribution/${CdnId}
                  - CdnId: !Ref CDNforTenantsS3Store
                    AccountId: !Ref AWS::AccountId

  ManageTenantEmployeesLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ManageTenantEmployeesLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  # ---------- Manage Employee Profile Lambda ----------

  ManageEmployeeProfileLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/employees-module/manage-employee-profile/
      Description: "Manages Employee Individual Profile"
      Role: !GetAtt ManageEmployeeProfileLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          EMPLOYEE_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value
          CARDS_META_DATA_TABLE: !Ref CardsMetaDataTable
          # CDN related variables
          SECRETS_CND_PK_ARN: !Ref PrivateKeySecretsCloudfront
          PUBLIC_KEY_ID: !GetAtt CloudFrontPublicKeyId.Value
          CDN_DOMAIN: !GetAtt CDNforTenantsS3Store.DomainName
          # Contents Bucket Name
          BUCKET_NAME: !Ref TenantContentsBucket

  ManageEmployeeProfileLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt EmployeeDataTable.Arn
                  - !Sub ${EmployeeDataTable.Arn}/index/*
                  - !GetAtt CardsMetaDataTable.Arn
                  - !Sub ${CardsMetaDataTable.Arn}/index/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref PrivateKeySecretsCloudfront
              - Effect: Allow
                Action:
                  - cloudfront:* # Adding the internItem action
                Resource: !Sub
                  - arn:aws:cloudfront::${AccountId}:distribution/${CdnId}
                  - CdnId: !Ref CDNforTenantsS3Store
                    AccountId: !Ref AWS::AccountId
              - Effect: Allow
                Action:
                  - s3:* # Adding the internItem action
                Resource: !Sub
                  - arn:aws:s3:::${BucketName}/*
                  - BucketName: !Ref TenantContentsBucket

  ManageEmployeeProfileInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ManageEmployeeProfileLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  # ---------- update-tenantTeams-table from employee data table lambda ----------

  UpdateTenantTeamsTableLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/teams-module/update-tenantTeams-table/
      Description: "Updates Tenant Teams Information"
      Role: !GetAtt UpdateTenantTeamsTableLambdaRole.Arn
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          TENANT_TEAMS_TABLE: !Ref TenantTeamsTable

  UpdateTenantTeamsTableLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub UpdateTenantTeamsTable-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/TenantLambda/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt TenantTeamsTable.Arn
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: "*"

  UpdateTenantTeamsTableLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UpdateTenantTeamsTableLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${InvokeCreateUserDataLambdaRule}

  # --------------- Rewards Management and related resources --------------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------------------------------------------------------------

  # ---------- Manage Reward Rules Lambda ----------

  ManageRewardRulesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/rewards-module/manage-reward-rules/
      Description: "To handle Create/Update/Delete operations for EmployeeRewardRules in the DynamoDB table"
      Role: !GetAtt ManageRewardRulesLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          REWARDS_RULES_TABLE: !Ref RewardRulesTable
          REWARDS_RULES_TABLE_RULE_STATUS_INDEX: !GetAtt DDBRewardRulesTableRuleStatusIndex.Value
          REWARDS_RULES_TABLE_LOG_UPDATE_INDEX: !GetAtt DDBRewardRulesTableRuleLogUpdateDateIndex.Value
          # Employee Service ENV Variables
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          EMPLOYEE_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value
          # SQS Message queue for Rewards TX
          REWARD_TRANSFER_SQS_QUEUE: !Ref RewardTransferFifoQueue

  ManageRewardRulesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Manage-Reward-Rules-Lambda-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/RewardsLambda/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: !GetAtt RewardTransferFifoQueue.Arn
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:ExecuteStatement
                  - dynamodb:PartiQLSelect
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt RewardRulesTable.Arn
                  - !Sub ${RewardRulesTable.Arn}/index/*
                  - !GetAtt EmployeeDataTable.Arn
                  - !Sub ${EmployeeDataTable.Arn}/index/*

  ManageRewardsRulesInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ManageRewardRulesLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  #----------- Reward Transfer Related Resources -----------

  RewardTransferFifoQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: True
      QueueName: !Sub RewardTransfer-Fifo-Queue-${Environment}.fifo
      VisibilityTimeout: 360

  RewardTransferLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/rewards-module/reward-transfer/
      Description: "Handles Reward Transfer from Source to Destination Entities"
      Role: !GetAtt RewardTransferLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          REWARD_RULES_TABLE: !Ref RewardRulesTable
          REWARDS_TRANSFER_LOGS_TABLE: !Ref RewardsTransferLogsTableV2
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt RewardTransferFifoQueue.Arn

  RewardTransferLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub RewardTransferLambdaRole-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/RewardTransfer/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:*
                Resource:
                  - !GetAtt RewardTransferFifoQueue.Arn
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt EmployeeDataTable.Arn
                  - !GetAtt RewardRulesTable.Arn
                  - !GetAtt RewardsTransferLogsTableV2.Arn
                  - !Sub ${RewardsTransferLogsTableV2.Arn}/index/*

  #----------- Reward Transfer Logs Resources -----------

  RewardTransferLogsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/rewards-module/reward-transfer-logs/
      Description: "Rewards Transfer Logs"
      Role: !GetAtt RewardTransferLogsLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          # Employee Related Environment Variables
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          EMPLOYEE_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value
          #Rewards Transfer Logs Table
          REWARDS_TRANSFER_LOGS_TABLE: !Ref RewardsTransferLogsTableV2

  RewardTransferLogsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub RewardTransferLogsLambdaRole-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/RewardTransfer/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt EmployeeDataTable.Arn
                  - !Sub ${EmployeeDataTable.Arn}/index/*
                  - !GetAtt RewardsTransferLogsTableV2.Arn
                  - !Sub ${RewardsTransferLogsTableV2.Arn}/index/*

  RewardTransferLogsInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RewardTransferLogsLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  # ---------- Start Rewards Rule Transaction Lambda ----------

  StartRewardsRuleTransactionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/rewards-module/start-reward-rule-transaction/
      Description: "To start reward rule transaction using cron tab expression"
      Role: !GetAtt StartRewardsRuleTransactionLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment

  StartRewardsRuleTransactionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Start-Reward-Rule-Transaction-Lambda-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/RewardRuleTransactionLambda/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: "*"

  StartRewardsRuleTransactionInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StartRewardsRuleTransactionLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${InvokeStartRewardRuleTransactionLambdaRule}

  # ---------- IAM Role for S3 Bucket ----------

  CreateTenantCardsIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Create-Tenant-Cards-Template-role-${Environment}
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: IAM Role for S3 Bucket
      Policies:
        - PolicyName: CreateTenantCardsIAMRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: !Join ["/", [!GetAtt TenantContentsBucket.Arn, "*"]]

  # ---------- Lambda to upload to s3 and update the cards meta data ----------

  ManageCardTemplateLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Tenant Lambda for managing card templates"
      Role: !GetAtt ManageCardTemplateLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Timeout: 300
      CodeUri: ../../lambdas/tenant-lambdas/rewards-module/manage-cards-template/
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          # CDN Services
          SECRETS_CND_PK_ARN: !Ref PrivateKeySecretsCloudfront
          PUBLIC_KEY_ID: !GetAtt CloudFrontPublicKeyId.Value
          CDN_DOMAIN: !GetAtt CDNforTenantsS3Store.DomainName
          #  Cards Table and Index
          REWARDS_CARDS_TABLE: !Ref RewardCardsTable
          CARD_ID_STATUS_INDEX: CardId-Status_Index
          # Cards MetaData table
          COMPANY_CARDS_META_DATA_TABLE: !Ref CardsMetaDataTable
          CARD_TYPE_INDEX: CardType_Index
          # Cards Creation Tracking Table
          CARDS_TRACKER_TABLE: !Ref CardsCreationTrackingTable
          CARD_TRACKER_CARDID_TIMESTAMP_INDEX: CardId-StartTimestamp_Index
          # Rewards+Cards TransferLogs Table
          REWARDS_TRANSFER_LOGS_TABLE: !Ref RewardsTransferLogsTableV2
          # Content Service related Environment Variables
          S3_BUCKET: !Ref TenantContentsBucket
          # Employee Related Environment Variables
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          EMPLOYEE_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value

  ManageCardTemplateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub UpdateCardTemplate-Lambda-Role-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem # Adding the internItem action
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"

  ManageCardTemplateLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ManageCardTemplateLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*


  # ------------------- Cards Generation Resources -------------------
  # -------------------------------------------------------------------


  # 1) ------------------- HandleCreateCardsLambda --------------------

  HandleCreateCardsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/rewards-module/handle-create-cards/
      Description: "To handle creation of cards"
      Role: !GetAtt HandleCreateCardsLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          SFN_ARN: !GetAtt CardsCreationLogicStateMachine.Arn
          CARDS_TRACKER_TABLE: !Ref CardsCreationTrackingTable
          CARDS_TABLE: !Ref RewardCardsTable
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          EMPLOYEE_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value

  HandleCreateCardsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Handle-Cards-Lambda-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/HandleCardsLambda/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt CardsCreationTrackingTable.Arn
                  - !GetAtt RewardCardsTable.Arn
                  - !GetAtt EmployeeDataTable.Arn
                  - !Sub ${EmployeeDataTable.Arn}/index/*
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !GetAtt CardsCreationLogicStateMachine.Arn

  HandleCreateCardsInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt HandleCreateCardsLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*


  # 2) ------------------- Start Cards Creation Lambda --------------------

  StartCardsCreationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/rewards-module/cards-creation-sfn/start-cards-creation/
      Description: "To get the metadata of cards"
      Role: !GetAtt StartCardsCreationLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          CARDS_METADATA_TABLE: !Ref CardsMetaDataTable
          CARDS_TRACKER_TABLE: !Ref CardsCreationTrackingTable

  StartCardsCreationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub StartCardsCreationRole-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/StartCardsCreation/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt CardsMetaDataTable.Arn
                  - !GetAtt CardsCreationTrackingTable.Arn

  # 3) ------------------- GenerateCardsBatchLambda -------------------

  GenerateCardsBatchLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/rewards-module/cards-creation-sfn/generate-cards-batch/
      Description: "To generate the batch of cards"
      Role: !GetAtt GenerateCardsBatchLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          CARDS_TRACKER_TABLE: !Ref CardsCreationTrackingTable
          CARDS_TABLE: !Ref RewardCardsTable

  GenerateCardsBatchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Generate-Cards-Batch-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/GenerateCardsBatchLambda/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt RewardCardsTable.Arn
                  - !GetAtt CardsCreationTrackingTable.Arn


  # 4) ------------------- State Machine for Generate Cards Handling --------------------

  CardsCreationStateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "states.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt StartCardsCreationLambda.Arn
                  - !GetAtt GenerateCardsBatchLambda.Arn
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*'

  CardsCreationLogicStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub CardsCreationLogic-StateMachine-${Environment}
      RoleArn: !GetAtt "CardsCreationStateMachineRole.Arn"
      Definition:
        StartAt: StartCardsCreation
        States:
          StartCardsCreation:
            Type: Task
            Resource: !GetAtt StartCardsCreationLambda.Arn
            Next: BatchingLoop
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 3
                MaxAttempts: 3

          BatchingLoop:
            Type: Map
            InputPath: $.CardsCreationBatches
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE
              StartAt: GenerateCardsBatch
              States:
                GenerateCardsBatch:
                  Type: Task
                  Resource: !GetAtt GenerateCardsBatchLambda.Arn
                  Retry:
                    - ErrorEquals:
                        - States.ALL
                      IntervalSeconds: 1
                      MaxAttempts: 1
                  End: true
            End: true


  # --------------- Tenant Teams Related functions --------------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------------------------------------------------------------

  # ---------- Lambda to manage tenant teams ----------

  ManageTenantTeamsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Tenant Lambda for managing teams"
      Role: !GetAtt ManageTenantTeamsLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Timeout: 300
      CodeUri: ../../lambdas/tenant-lambdas/teams-module/manage-tenant-teams/
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          TENANT_TEAMS_TABLE: !Ref TenantTeamsTable
          TENANT_TEAM_INDEX_TEAMS: RelatedEntityId-EntityId_Index
          EMPLOYEES_TABLE: !Ref EmployeeDataTable
          EMPLOYEES_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value
          # cdn related
          SECRETS_CND_PK_ARN: !Ref PrivateKeySecretsCloudfront
          PUBLIC_KEY_ID: !GetAtt CloudFrontPublicKeyId.Value
          CDN_DOMAIN: !GetAtt CDNforTenantsS3Store.DomainName

  ManageTenantTeamsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ManageTenantTeams-Lambda-Role-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:BatchWrite
                  - dynamodb:BatchWriteItem
                  - dynamodb:PartiQLSelect
                  - dynamodb:PartiQLUpdate
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt EmployeeDataTable.Arn
                  - !Sub ${EmployeeDataTable.Arn}/index/*
                  - !GetAtt TenantTeamsTable.Arn
                  - !Sub ${TenantTeamsTable.Arn}/index/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref PrivateKeySecretsCloudfront
              - Effect: Allow
                Action:
                  - cloudfront:* # Adding the internItem action
                Resource: !Sub
                  - arn:aws:cloudfront::${AccountId}:distribution/${CdnId}
                  - CdnId: !Ref CDNforTenantsS3Store
                    AccountId: !Ref AWS::AccountId

  ManageTenantTeamsLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ManageTenantTeamsLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  # --------------- Feeds, Events, appreciations and Certificates related functions --------------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------------------------------------------------------------

  # ---------- Lambda to manage Tenant Skills + Values + Milestones + Engagement ----------

  ManageTenantEngagementLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Tenant Lambda for managing appreciations + skills + values + milestones"
      Role: !GetAtt ManageTenantEngagementLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Timeout: 300
      CodeUri: ../../lambdas/tenant-lambdas/appreciations-module/manage-tenant-appreciations/
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          # Engagement related Environment Variables
          TENANT_SKILLS_TABLE: !Ref TenantSkillsTable
          TENANT_VALUES_TABLE: !Ref TenantValuesTable
          TENANT_MILESTONES_TABLE: !Ref TenantMilestonesTable
          TENANT_METRICS_TABLE: !Ref TenantMetricsTable
          TENANT_ENGAGEMENT_TABLE: !Ref TenantEngagementTable
          TENANT_ENGAGEMENT_ENTITY_ID_INDEX: !GetAtt DDBTenantEngagementTableEngagementIdIndex.Value
          TENANT_ENGAGEMENT_TIMESTAMP_INDEX: !GetAtt DDBTenantEngagementTableTimeStampIndex.Value
          # CDN related variables
          SECRETS_CND_PK_ARN: !Ref PrivateKeySecretsCloudfront
          PUBLIC_KEY_ID: !GetAtt CloudFrontPublicKeyId.Value
          CDN_DOMAIN: !GetAtt CDNforTenantsS3Store.DomainName
          # Content Service related Environment Variables
          S3_BUCKET: !Ref TenantContentsBucket
          # Employee Related Environment Variables
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          EMPLOYEE_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value
          # Teams related Environment Variables
          TENANT_TEAMS_TABLE: !Ref TenantTeamsTable
          # Rewards Transfer SQS Queue
          REWARD_TRANSFER_SQS_QUEUE: !Ref RewardTransferFifoQueue

  ManageTenantEngagementLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ManageTenantEngagement-Lambda-Role-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:* # Adding the internItem action
                Resource: "*" # Adding the internItem action
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref PrivateKeySecretsCloudfront
              - Effect: Allow
                Action:
                  - cloudfront:* # Adding the internItem action
                Resource: !Sub
                  - arn:aws:cloudfront::${AccountId}:distribution/${CdnId}
                  - CdnId: !Ref CDNforTenantsS3Store
                    AccountId: !Ref AWS::AccountId
              - Effect: Allow
                Action:
                  - s3:* # Adding the internItem action
                Resource: !Sub
                  - arn:aws:s3:::${BucketName}/*
                  - BucketName: !Ref TenantContentsBucket
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: !GetAtt RewardTransferFifoQueue.Arn

  ManageTenantEngagementInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ManageTenantEngagementLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  # ---------- Lambda to manage Tenant Certificates + Certificate assignments  ----------

  CertificateTransferFifoQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: True
      QueueName: !Sub CertificateTransfer-Fifo-Queue-${Environment}.fifo
      VisibilityTimeout: 360

  ManageTenantCertificatesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Tenant Lambda for managing certificates"
      Role: !GetAtt ManageTenantCertificatesLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Timeout: 300
      CodeUri: ../../lambdas/tenant-lambdas/appreciations-module/manage-tenant-certificates/
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          TENANT_CERTIFICATES_TABLE: !Ref TenantCertificatesTable
          CERTIFICATELOGS_INDEX: CertificateTransferLogsId_Source
          # Employee Auth Related Environment Variables
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          EMPLOYEE_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value
          # Content Service related Environment Variables
          S3_BUCKET: !Ref TenantContentsBucket
          # CDN Related Environment Variables
          SECRETS_CND_PK_ARN: !Ref PrivateKeySecretsCloudfront
          PUBLIC_KEY_ID: !GetAtt CloudFrontPublicKeyId.Value
          CDN_DOMAIN: !GetAtt CDNforTenantsS3Store.DomainName
          # SQS queue for certificates
          CERTIFICATE_TRANSFER_SQS_QUEUE: !Ref CertificateTransferFifoQueue
          BADGES_TRANSFER_LOGS_TABLE: !Ref CertificateTransferLogsTable

  ManageTenantCertificatesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ManageTenantCertificates-Lambda-Role-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:BatchWrite
                  - dynamodb:PartiQLSelect
                  - dynamodb:PartiQLUpdate
                  - dynamodb:ExecuteStatement
                Resource:
                  - !GetAtt TenantCertificatesTable.Arn
                  - !Sub ${TenantCertificatesTable.Arn}/index/*
                  - !GetAtt CertificateTransferLogsTable.Arn
                  - !Sub ${CertificateTransferLogsTable.Arn}/index/*
                  - !GetAtt EmployeeDataTable.Arn
                  - !Sub ${EmployeeDataTable.Arn}/index/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${TenantContentsBucket}/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref PrivateKeySecretsCloudfront
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: !GetAtt CertificateTransferFifoQueue.Arn
              - Effect: Allow
                Action:
                  - cloudfront:* # Adding the internItem action
                Resource: !Sub
                  - arn:aws:cloudfront::${AccountId}:distribution/${CdnId}
                  - CdnId: !Ref CDNforTenantsS3Store
                    AccountId: !Ref AWS::AccountId

  ManageTenantCertificatesInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ManageTenantCertificatesLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  #--------------- Surveys Module Related Resources -----------------

  SurveyQuestionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub SurveyQuestionsTable-${Environment}
      AttributeDefinitions:
        - AttributeName: SurveyId
          AttributeType: S
        - AttributeName: QuestionId
          AttributeType: S
      KeySchema:
        - AttributeName: SurveyId
          KeyType: HASH
        - AttributeName: QuestionId
          KeyType: RANGE
      BillingMode: "PAY_PER_REQUEST"
      # GlobalSecondaryIndexes:
      #   - IndexName: RelatedEntityId-EntityId_Index
      #     KeySchema:
      #       - AttributeName: "RelatedEntityId"
      #         KeyType: "HASH"
      #       - AttributeName: "EntityId"
      #         KeyType: "RANGE"
      #     Projection:
      #       ProjectionType: "ALL"

  SurveyResponseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub SurveyResponseTable-${Environment}
      AttributeDefinitions:
        - AttributeName: ResponseId
          AttributeType: S
        - AttributeName: UserName
          AttributeType: S
      KeySchema:
        - AttributeName: ResponseId
          KeyType: HASH
        - AttributeName: UserName
          KeyType: RANGE
      BillingMode: "PAY_PER_REQUEST"
      # GlobalSecondaryIndexes:
      #   - IndexName: RelatedEntityId-EntityId_Index
      #     KeySchema:
      #       - AttributeName: "RelatedEntityId"
      #         KeyType: "HASH"
      #       - AttributeName: "EntityId"
      #         KeyType: "RANGE"
      #     Projection:
      #       ProjectionType: "ALL"

  ManageSurveysLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/surveys-module/manage-surveys/
      Description: "To handle surveys in the DynamoDB table"
      Role: !GetAtt ManageSurveysLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          SURVEY_QUESTIONS_TABLE: !Ref SurveyQuestionsTable
          SURVEY_RESPONSE_TABLE: !Ref SurveyResponseTable
          EMPLOYEES_TABLE: !Ref EmployeeDataTable
          EMPLOYEES_TABLE_COGNITO_ID_INDEX: !GetAtt DDBEmployeeDataTableCognitoIdIndex.Value
          # REWARDS_RULES_TABLE_RULE_STATUS_INDEX: !GetAtt DDBRewardRulesTableRuleStatusIndex.Value
          # REWARDS_RULES_TABLE_LOG_UPDATE_INDEX: !GetAtt DDBRewardRulesTableRuleLogUpdateDateIndex.Value

  ManageSurveysLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Manage-Surveys-Lambda-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/SurveysLambda/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:ExecuteStatement
                  - dynamodb:PartiQLSelect
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt SurveyQuestionsTable.Arn
                  - !Sub ${SurveyQuestionsTable.Arn}/index/*
                  - !GetAtt SurveyResponseTable.Arn
                  - !Sub ${SurveyResponseTable.Arn}/index/*
                  - !GetAtt EmployeeDataTable.Arn
                  - !Sub ${EmployeeDataTable.Arn}/index/*

  ManageSurveysInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ManageSurveysLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  #--------------- Certificate Transfer Related Resources -----------

  CertificateTransferLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/appreciations-module/certificates-transfer/
      Description: "Handles Certificate Transfer from Source to Destination Entities"
      Role: !GetAtt CertificateTransferLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          EMPLOYEE_TABLE: !Ref EmployeeDataTable
          BADGES_TRANSFER_LOGS_TABLE: !Ref CertificateTransferLogsTable
          BADGES_TABLE: !Ref TenantCertificatesTable
          BADGES_TABLE_CRITERIA_THRESHOLD_INDEX: "Criteria_Threshold-Index"
          S3_BUCKET: !Ref TenantContentsBucket
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt CertificateTransferFifoQueue.Arn

  CertificateTransferLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CertificateTransferLambdaRole-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/RewardTransfer/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::tenant-contents-${Environment}/*
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:*
                Resource:
                  - !GetAtt CertificateTransferFifoQueue.Arn
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - dynamodb:PartiQLSelect
                Resource:
                  - !GetAtt TenantCertificatesTable.Arn
                  - !Sub ${TenantCertificatesTable.Arn}/index/*
                  - !GetAtt EmployeeDataTable.Arn
                  - !GetAtt CertificateTransferLogsTable.Arn

  # --------------- Outbound Integrations and GIS Functions --------------------------------------------------------------------------------------------------
  # ------------------------------------------------------------------------------------------------------------------------------------------------

  # --------------- Tenant Outbound Integrations ---------------
  TenantOutboundIntegrationsSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub TenantOutboundIntegrationsSNS-${Environment}
      FifoTopic: False
      TopicName: !Sub TenantOutboundIntegrationsSNS-${Environment}

  EventBridgeToToSnsPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sns:Publish
              - sns:Subscribe
            Resource: !Ref TenantOutboundIntegrationsSNS
      Topics:
        - !Ref TenantOutboundIntegrationsSNS

  TenantOutboundIntegrationsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: "lambda"
      Endpoint: !GetAtt TenantOutboundIntegrationsLambda.Arn
      TopicArn: !Ref TenantOutboundIntegrationsSNS

  TenantOutboundIntegrationsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/integrations-module/tenant-outbound-integrations/
      Description: "An sns topic lambda to send slack and teams notifications"
      Role: !GetAtt TenantOutboundIntegrationsLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          TENANT_INTEGRATION_TABLE: !Ref TenantIntegrationTable

  TenantOutboundIntegrationsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Tenant-OutboundIntegrations-Lambda-Role-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                  - sns:Publish
                  - sns:GetTopicAttributes
                  - dynamodb:GetItem
                Resource: "*" # Needs to be updated

  # ------------------- Get GIS data -------------------

  GetGISDataLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/rewards-module/get-nearest-GIS/
      Description: "To get coordinates in the DDB"
      Role: !GetAtt GetGISDataLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          GIS_TABLE: "GIS-POC"
          # GIS_TABLE: !If
          #   - IsTestBuild
          #   - !Sub
          #     - ${TableNamePrefix}-test-${DataStack}
          #     - { TableNamePrefix: !GetAtt GISTablePrefix.Value }
          #   - !Sub
          #     - ${TableNamePrefix}-${Environment}-${DataStack}
          #     - { TableNamePrefix: !GetAtt GISTablePrefix.Value }

  GetGISDataLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Get-GIS-Data-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/PostGISDataLambda/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:GetItem
                Resource: "*"

  GetGISDataLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetGISDataLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  # ------------------- Post GIS data -------------------

  PostGISDataLambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ../../lambdas/tenant-lambdas/rewards-module/post-GIS-data/
      Description: "To put coordinates in the DDB"
      Role: !GetAtt PostGISDataLambdaRole.Arn
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          Environment: !Ref Environment
          GIS_TABLE: !If
            - IsTestBuild
            - !Sub
              - ${TableNamePrefix}-test-${DataStack}
              - { TableNamePrefix: !GetAtt GISTablePrefix.Value }
            - !Sub
              - ${TableNamePrefix}-${Environment}-${DataStack}
              - { TableNamePrefix: !GetAtt GISTablePrefix.Value }

  PostGISDataLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Post-GIS-Data-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/PostGISDataLambda/"
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:GetItem
                Resource: "*"

  PostGISDataLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostGISDataLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantAPIGateway}/*

  # ---------- 7.Cloudfront for all the content delivery in Tenant Portal ----------

  # --------- S3 bucket to store for content storage

  TenantContentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub tenant-contents-${Environment}

  S3CDNBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TenantContentsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: "PolicyForCloudFrontPrivateContent"
        Statement:
          - Sid: "AllowCloudFrontServicePrincipal"
            Effect: "Allow"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::tenant-contents-${Environment}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub
                  - arn:aws:cloudfront::${AccountId}:distribution/${CdnId}
                  - CdnId: !Ref CDNforTenantsS3Store
                    AccountId: !Ref AWS::AccountId

  CardsS3OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Identity for accessing Cards S3 bucket"

  # using openssl to generate a 2048 publickey and a privatekey from the publickey
  PrivateKeySecretsCloudfront:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Private Key for accessing data from cloudfront
      Name: !Sub /cloudfront/keys/private-key-images-${Environment}

  TenantKeyGroup:
    Type: AWS::CloudFront::KeyGroup
    Properties:
      KeyGroupConfig:
        Comment: "This is the key group for signed URLs"
        Items:
          - !GetAtt CloudFrontPublicKeyId.Value # Id for the required publickey. This is created outside of the Cloudformation.
        Name: !Sub TenantKeyGroup-${Environment}

  OriginAccessControlTenants:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: OAC for the CDN
        Name: !Sub OAC-CDN-TENANTS-${Environment}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CDNforTenantsS3Store:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: TenantContentS3Origin
            DomainName: !GetAtt TenantContentsBucket.DomainName
            OriginAccessControlId: !GetAtt OriginAccessControlTenants.Id
            S3OriginConfig:
              OriginAccessIdentity: "" # Empty OAI as we are using OAC , Ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-s3originconfig.html
        CacheBehaviors:
          - CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Ref: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-caching-optimized
            PathPattern: "*"
            TargetOriginId: TenantContentS3Origin
            ViewerProtocolPolicy: redirect-to-https
            TrustedKeyGroups:
              - !Ref TenantKeyGroup
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Ref: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-caching-optimized
          TargetOriginId: TenantContentS3Origin
          ViewerProtocolPolicy: redirect-to-https

  # ----------- Custom resource to onboard data into DDB Table-----------
  # ----------- This is a one time operation to load the default data into the DDB Table ------------
  ManageDDBTableDefaultData:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Loads and Deletes Default data"
      CodeUri: ../../cfn_handler_resources/load-default-data/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Timeout: 300
      Tracing: Active
      Policies:
        - AWSLambdaExecute
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: "*"

  # ---------- Automated Testing stack role ----------

  AutoTestExecutionRole:
    Type: AWS::IAM::Role
    Condition: IsTestBuild
    Properties:
      Path: /testing/
      RoleName: !Sub saas-tenant-apis-${Environment}-auto-test-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: "*"

Outputs:
  TenantProfilePoolId:
    Description: "Tenant User Pool ID"
    Value:
      Ref: TenantCognitoUserPool
  TenantProfilePoolClientId:
    Description: "Tenant User Pool Client ID"
    Value:
      Ref: TenantProfileCognitoClient
